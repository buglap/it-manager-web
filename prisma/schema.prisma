// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Supplier {
  id        String   @id @default(cuid())
  nit       String
  name      String
  email     String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String        @id @default(cuid())
  email         String?       @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          Role?         @relation(fields: [roleId], references: [id])
  roleId        String?
  profile       Profile?
  requitements  Requirement[]
  devices       Device[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
}

enum Enum_IdType {
  national
  foreign
}

model Profile {
  id                   String       @id @default(cuid())
  identificationType   Enum_IdType?
  identificationNumber String?
  phone                String?
  direction            String?
  image                String?
  position             Position?    @relation(fields: [positionId], references: [id])
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  positionId           String?
  user                 User         @relation(fields: [userId], references: [id])
  userId               String       @unique
}

enum Enum_RolName {
  Admin
  Employee
}

model Role {
  id        String       @id @default(cuid())
  name      Enum_RolName @unique
  users     User[]
  pages     Page[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Page {
  id        String   @id @default(cuid())
  name      String
  path      String   @unique
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Enum_PositionName {
  developer
  architect
  managment
}

model Position {
  id        String            @id @default(cuid())
  name      Enum_PositionName
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  employees Profile[]
}

model Device {
  id                String          @id @default(cuid())
  name              String
  description       String
  brand             String
  availableQuantiry Int
  invoice           String
  deviceType        Enum_DeviceType
  employees         User[]
  requirements      Requirement[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

enum Enum_DeviceType {
  Laptop
  Mouse
  Keyboard
  Display
  headband
  Charger
  Cell_phone
}

enum Enum_RequirementState {
  approved
  denied
  pending
}

model Requirement {
  id         String                @id @default(cuid())
  reason     String
  isApproved Enum_RequirementState @default(pending)
  comments   String
  devices    Device[]
  employee   User                  @relation(fields: [employeeId], references: [id])
  employeeId String
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
